package uts.export.map;

//------------------------------------------------------------------------
// This code was generated by IBM VisualAge for Java Data Access Builder.
// WARNING: Modifications to this code will be lost on next code generation.
//------------------------------------------------------------------------



import java.lang.*;
import java.math.*;
import java.util.*;
import java.beans.*;
import java.sql.*;
import com.ibm.ivj.eab.dab.*;
import java.io.Serializable;

//----------------------------------------------------------------
//
// Bol - persistent object class
//
//---------------------------------------------------------------- 

/**
  * Схема для грузового
  */

public class Bol extends PersistentObject implements Cloneable, Serializable
{

  private static DatastoreJDBC iBolDatastore;

  private static String _qualifier = "ILDAR.";

  private BolDataId theDataId;
  private transient PODataIdPropertyChangeAdapter iDataIdAdapter;
  

 //----------------------------------------------------------------
 // Bol Attributes and methods
 //----------------------------------------------------------------

  /*--------------------------------------------------------------
	 Bol n access methods
	 This attribute is mapped to N.
	--------------------------------------------------------------*/
   private Short iN = null;

  /*--------------------------------------------------------------
	 Bol idate access methods
	 This attribute is mapped to IDATE.
	--------------------------------------------------------------*/
   private java.sql.Date iIdate = null;

  /*--------------------------------------------------------------
	 Bol shipper access methods
	 This attribute is mapped to SHIPPER.
	--------------------------------------------------------------*/
   private String iShipper = null;

  /*--------------------------------------------------------------
	 Bol consignee access methods
	 This attribute is mapped to CONSIGNEE.
	--------------------------------------------------------------*/
   private String iConsignee = null;

  /*--------------------------------------------------------------
	 Bol notifyaddress access methods
	 This attribute is mapped to NOTIFYADDRESS.
	--------------------------------------------------------------*/
   private String iNotifyaddress = null;

  /*--------------------------------------------------------------
	 Bol shipowner access methods
	 This attribute is mapped to SHIPOWNER.
	--------------------------------------------------------------*/
   private String iShipowner = null;

  /*--------------------------------------------------------------
	 Bol flag access methods
	 This attribute is mapped to FLAG.
	--------------------------------------------------------------*/
   private String iFlag = null;

  /*--------------------------------------------------------------
	 Bol vessel access methods
	 This attribute is mapped to VESSEL.
	--------------------------------------------------------------*/
   private String iVessel = null;

  /*--------------------------------------------------------------
	 Bol portofloading access methods
	 This attribute is mapped to PORTOFLOADING.
	--------------------------------------------------------------*/
   private String iPortofloading = null;

  /*--------------------------------------------------------------
	 Bol portofdischarge access methods
	 This attribute is mapped to PORTOFDISCHARGE.
	--------------------------------------------------------------*/
   private String iPortofdischarge = null;

  /*--------------------------------------------------------------
	 Bol distination access methods
	 This attribute is mapped to DISTINATION.
	--------------------------------------------------------------*/
   private String iDistination = null;

  /*--------------------------------------------------------------
	 Bol freight1 access methods
	 This attribute is mapped to FREIGHT1.
	--------------------------------------------------------------*/
   private String iFreight1 = null;

  /*--------------------------------------------------------------
	 Bol freight2 access methods
	 This attribute is mapped to FREIGHT2.
	--------------------------------------------------------------*/
   private String iFreight2 = null;

  /*--------------------------------------------------------------
	 Bol master access methods
	 This attribute is mapped to MASTER.
	--------------------------------------------------------------*/
   private String iMaster = null;

  /*--------------------------------------------------------------
	 Bol descript access methods
	 This attribute is mapped to DESCRIPT.
	--------------------------------------------------------------*/
   private String iDescript = null;

  /*--------------------------------------------------------------
	 Bol options access methods
	 This attribute is mapped to OPTIONS.
	--------------------------------------------------------------*/
   private String iOptions = null;

  /*--------------------------------------------------------------
	 Bol bols access methods
	 This attribute is mapped to BOLS.
	--------------------------------------------------------------*/
   private String iBols = null;

  /*--------------------------------------------------------------
	 Bol mnfstbot access methods
	 This attribute is mapped to MNFSTBOT.
	--------------------------------------------------------------*/
   private String iMnfstbot = null;

  /*--------------------------------------------------------------
	 Bol name access methods
	 This attribute is mapped to NAME.
	--------------------------------------------------------------*/
   private String iName = null;

  /*--------------------------------------------------------------
	 Bol marking access methods
	 This attribute is mapped to MARKING.
	--------------------------------------------------------------*/
   private String iMarking = null;

  /*--------------------------------------------------------------
	 Bol quantity access methods
	 This attribute is mapped to QUANTITY.
	--------------------------------------------------------------*/
   private String iQuantity = null;

  /*--------------------------------------------------------------
	 Bol weight access methods
	 This attribute is mapped to WEIGHT.
	--------------------------------------------------------------*/
   private String iWeight = null;

  /*--------------------------------------------------------------
	 Bol namerus access methods
	 This attribute is mapped to NAMERUS.
	--------------------------------------------------------------*/
   private String iNamerus = null;

  /*--------------------------------------------------------------
	 Bol note access methods
	 This attribute is mapped to NOTE.
	--------------------------------------------------------------*/
   private String iNote = null;

  /*--------------------------------------------------------------
	 Bol gross_weight access methods
	 This attribute is mapped to GROSS_WEIGHT.
	--------------------------------------------------------------*/
   private Double iGross_weight = null;

  /*--------------------------------------------------------------
	 Bol netweight access methods
	 This attribute is mapped to NETWEIGHT.
	--------------------------------------------------------------*/
   private Double iNetweight = null;

  /*--------------------------------------------------------------
	 Bol contract access methods
	 This attribute is mapped to CONTRACT.
	--------------------------------------------------------------*/
   private String iContract = null;

  boolean modified[] = { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };

  static DASQLGenerator generator = new DASQLGenerator("BOL",
													  new String[] {"ID"}, 
													  new String[] {"N",
													   "IDATE",
													   "SHIPPER",
													   "CONSIGNEE",
													   "NOTIFYADDRESS",
													   "SHIPOWNER",
													   "FLAG",
													   "VESSEL",
													   "PORTOFLOADING",
													   "PORTOFDISCHARGE",
													   "DISTINATION",
													   "FREIGHT1",
													   "FREIGHT2",
													   "MASTER",
													   "DESCRIPT",
													   "OPTIONS",
													   "BOLS",
													   "MNFSTBOT",
													   "NAME",
													   "MARKING",
													   "QUANTITY",
													   "WEIGHT",
													   "NAMERUS",
													   "NOTE",
													   "GROSS_WEIGHT",
													   "NETWEIGHT",
													   "CONTRACT"}, 
													  new String[] {"ID"}, 
													  null );

 //----------------------------------------------------------------
 // Constructors
 //----------------------------------------------------------------
  public Bol() {
	this(null,null); 
  }  
  public Bol(DatastoreJDBC aDatastore) {
	this(null,aDatastore); 
  }  
  public Bol(BolDataId aDataId) {
	this(aDataId,null);
  }  
  public Bol(BolDataId aDataId, DatastoreJDBC aDatastore) {
	super(aDatastore);
	if ( aDataId == null ) theDataId = new BolDataId();
	else theDataId = aDataId;

	iDataIdAdapter = new PODataIdPropertyChangeAdapter(theDataId,this);
  }  
  public void _executeAction( String _methodName, Object[] _params ) throws Exception { 
	if ( _methodName.equals("retrieve()") ) {
	  retrieve(  );
	} 
	else if ( _methodName.equals("add()") ) {
	  add(  );
	} 
	else if ( _methodName.equals("delete()") ) {
	  delete(  );
	} 
	else if ( _methodName.equals("updateAll()") ) {
	  updateAll(  );
	} 
	else if ( _methodName.equals("update(dataId)") ) {
	  update( (BolDataId)_params[0] );
	} 
	else if ( _methodName.equals("update()") ) {
	  update();
	} 

  }  
  protected POCompleteSupport _getPOCompleteSupport() { return _poSupport; }  
  protected static DatastoreJDBC _getStaticDatastore() {
	if (iBolDatastore != null) return iBolDatastore;
	else return DatastoreJDBC.getApplicationDatastore();
  }  
   void _setBols(String aBols) {
	 if (_sendingAttributeEvents) {
	   String temp = iBols; 
	   iBols = aBols; 
	   _changes.firePropertyChange("bols",  temp, aBols); 
	 } else {
	   iBols = aBols;
	 }
   }   
  protected void _setBusy(boolean flag) { super._setBusy(flag); }  
   void _setConsignee(String aConsignee) {
	 if (_sendingAttributeEvents) {
	   String temp = iConsignee; 
	   iConsignee = aConsignee; 
	   _changes.firePropertyChange("consignee",  temp, aConsignee); 
	 } else {
	   iConsignee = aConsignee;
	 }
   }   
   void _setContract(String aContract) {
	 if (_sendingAttributeEvents) {
	   String temp = iContract; 
	   iContract = aContract; 
	   _changes.firePropertyChange("contract",  temp, aContract); 
	 } else {
	   iContract = aContract;
	 }
   }   
   void _setDescript(String aDescript) {
	 if (_sendingAttributeEvents) {
	   String temp = iDescript; 
	   iDescript = aDescript; 
	   _changes.firePropertyChange("descript",  temp, aDescript); 
	 } else {
	   iDescript = aDescript;
	 }
   }   
   void _setDistination(String aDistination) {
	 if (_sendingAttributeEvents) {
	   String temp = iDistination; 
	   iDistination = aDistination; 
	   _changes.firePropertyChange("distination",  temp, aDistination); 
	 } else {
	   iDistination = aDistination;
	 }
   }   
   void _setFlag(String aFlag) {
	 if (_sendingAttributeEvents) {
	   String temp = iFlag; 
	   iFlag = aFlag; 
	   _changes.firePropertyChange("flag",  temp, aFlag); 
	 } else {
	   iFlag = aFlag;
	 }
   }   
   void _setFreight1(String aFreight1) {
	 if (_sendingAttributeEvents) {
	   String temp = iFreight1; 
	   iFreight1 = aFreight1; 
	   _changes.firePropertyChange("freight1",  temp, aFreight1); 
	 } else {
	   iFreight1 = aFreight1;
	 }
   }   
   void _setFreight2(String aFreight2) {
	 if (_sendingAttributeEvents) {
	   String temp = iFreight2; 
	   iFreight2 = aFreight2; 
	   _changes.firePropertyChange("freight2",  temp, aFreight2); 
	 } else {
	   iFreight2 = aFreight2;
	 }
   }   
   void _setGross_weight(Double aGross_weight) {
	 if (_sendingAttributeEvents) {
	   Double temp = iGross_weight; 
	   iGross_weight = aGross_weight; 
	   _changes.firePropertyChange("gross_weight",  temp, aGross_weight); 
	 } else {
	   iGross_weight = aGross_weight;
	 }
   }   
   void _setId(Timestamp aId) { theDataId._setId(aId); }   
   void _setIdate(java.sql.Date aIdate) {
	 if (_sendingAttributeEvents) {
	   java.sql.Date temp = iIdate; 
	   iIdate = aIdate; 
	   _changes.firePropertyChange("idate",  temp, aIdate); 
	 } else {
	   iIdate = aIdate;
	 }
   }   
   void _setMarking(String aMarking) {
	 if (_sendingAttributeEvents) {
	   String temp = iMarking; 
	   iMarking = aMarking; 
	   _changes.firePropertyChange("marking",  temp, aMarking); 
	 } else {
	   iMarking = aMarking;
	 }
   }   
   void _setMaster(String aMaster) {
	 if (_sendingAttributeEvents) {
	   String temp = iMaster; 
	   iMaster = aMaster; 
	   _changes.firePropertyChange("master",  temp, aMaster); 
	 } else {
	   iMaster = aMaster;
	 }
   }   
   void _setMnfstbot(String aMnfstbot) {
	 if (_sendingAttributeEvents) {
	   String temp = iMnfstbot; 
	   iMnfstbot = aMnfstbot; 
	   _changes.firePropertyChange("mnfstbot",  temp, aMnfstbot); 
	 } else {
	   iMnfstbot = aMnfstbot;
	 }
   }   
   void _setN(Short aN) {
	 if (_sendingAttributeEvents) {
	   Short temp = iN; 
	   iN = aN; 
	   _changes.firePropertyChange("n",  temp, aN); 
	 } else {
	   iN = aN;
	 }
   }   
   void _setName(String aName) {
	 if (_sendingAttributeEvents) {
	   String temp = iName; 
	   iName = aName; 
	   _changes.firePropertyChange("name",  temp, aName); 
	 } else {
	   iName = aName;
	 }
   }   
   void _setNamerus(String aNamerus) {
	 if (_sendingAttributeEvents) {
	   String temp = iNamerus; 
	   iNamerus = aNamerus; 
	   _changes.firePropertyChange("namerus",  temp, aNamerus); 
	 } else {
	   iNamerus = aNamerus;
	 }
   }   
   void _setNetweight(Double aNetweight) {
	 if (_sendingAttributeEvents) {
	   Double temp = iNetweight; 
	   iNetweight = aNetweight; 
	   _changes.firePropertyChange("netweight",  temp, aNetweight); 
	 } else {
	   iNetweight = aNetweight;
	 }
   }   
   void _setNote(String aNote) {
	 if (_sendingAttributeEvents) {
	   String temp = iNote; 
	   iNote = aNote; 
	   _changes.firePropertyChange("note",  temp, aNote); 
	 } else {
	   iNote = aNote;
	 }
   }   
   void _setNotifyaddress(String aNotifyaddress) {
	 if (_sendingAttributeEvents) {
	   String temp = iNotifyaddress; 
	   iNotifyaddress = aNotifyaddress; 
	   _changes.firePropertyChange("notifyaddress",  temp, aNotifyaddress); 
	 } else {
	   iNotifyaddress = aNotifyaddress;
	 }
   }   
   void _setOptions(String aOptions) {
	 if (_sendingAttributeEvents) {
	   String temp = iOptions; 
	   iOptions = aOptions; 
	   _changes.firePropertyChange("options",  temp, aOptions); 
	 } else {
	   iOptions = aOptions;
	 }
   }   
   void _setPortofdischarge(String aPortofdischarge) {
	 if (_sendingAttributeEvents) {
	   String temp = iPortofdischarge; 
	   iPortofdischarge = aPortofdischarge; 
	   _changes.firePropertyChange("portofdischarge",  temp, aPortofdischarge); 
	 } else {
	   iPortofdischarge = aPortofdischarge;
	 }
   }   
   void _setPortofloading(String aPortofloading) {
	 if (_sendingAttributeEvents) {
	   String temp = iPortofloading; 
	   iPortofloading = aPortofloading; 
	   _changes.firePropertyChange("portofloading",  temp, aPortofloading); 
	 } else {
	   iPortofloading = aPortofloading;
	 }
   }   
   void _setQuantity(String aQuantity) {
	 if (_sendingAttributeEvents) {
	   String temp = iQuantity; 
	   iQuantity = aQuantity; 
	   _changes.firePropertyChange("quantity",  temp, aQuantity); 
	 } else {
	   iQuantity = aQuantity;
	 }
   }   
   void _setShipowner(String aShipowner) {
	 if (_sendingAttributeEvents) {
	   String temp = iShipowner; 
	   iShipowner = aShipowner; 
	   _changes.firePropertyChange("shipowner",  temp, aShipowner); 
	 } else {
	   iShipowner = aShipowner;
	 }
   }   
   void _setShipper(String aShipper) {
	 if (_sendingAttributeEvents) {
	   String temp = iShipper; 
	   iShipper = aShipper; 
	   _changes.firePropertyChange("shipper",  temp, aShipper); 
	 } else {
	   iShipper = aShipper;
	 }
   }   
   void _setVessel(String aVessel) {
	 if (_sendingAttributeEvents) {
	   String temp = iVessel; 
	   iVessel = aVessel; 
	   _changes.firePropertyChange("vessel",  temp, aVessel); 
	 } else {
	   iVessel = aVessel;
	 }
   }   
   void _setWeight(String aWeight) {
	 if (_sendingAttributeEvents) {
	   String temp = iWeight; 
	   iWeight = aWeight; 
	   _changes.firePropertyChange("weight",  temp, aWeight); 
	 } else {
	   iWeight = aWeight;
	 }
   }   
  /**
	* Add a row to the database.
	*/
  public void add() throws DAException { 

	if ( !_onBackground() && isAsynchronous() ) {
	  Object[] params = {   };
	  _putOnBackgroundThread( "add()", params );
	  return ;
	} 

	try { 
	  if (getCurrentDatastore() == null) throw new DAException(DAResource.NO_CONNECT_EXIST); 

	  _stmt = getCurrentDatastore().getConnection().prepareStatement(
		  "INSERT INTO " + Bol.getQualifier() + "\"BOL\" (" +
"                   \"ID\"," +
"                   \"N\"," +
"                   \"IDATE\"," +
"                   \"SHIPPER\"," +
"                   \"CONSIGNEE\"," +
"                   \"NOTIFYADDRESS\"," +
"                   \"SHIPOWNER\"," +
"                   \"FLAG\"," +
"                   \"VESSEL\"," +
"                   \"PORTOFLOADING\"," +
"                   \"PORTOFDISCHARGE\"," +
"                   \"DISTINATION\"," +
"                   \"FREIGHT1\"," +
"                   \"FREIGHT2\"," +
"                   \"MASTER\"," +
"                   \"DESCRIPT\"," +
"                   \"OPTIONS\"," +
"                   \"BOLS\"," +
"                   \"MNFSTBOT\"," +
"                   \"NAME\"," +
"                   \"MARKING\"," +
"                   \"QUANTITY\"," +
"                   \"WEIGHT\"," +
"                   \"NAMERUS\"," +
"                   \"NOTE\"," +
"                   \"GROSS_WEIGHT\"," +
"                   \"NETWEIGHT\"," +
"                   \"CONTRACT\" )" +
"           VALUES (?," +
"                   ?," +
"                   ?," +
"                   ?," +
"                   ?," +
"                   ?," +
"                   ?," +
"                   ?," +
"                   ?," +
"                   ?," +
"                   ?," +
"                   ?," +
"                   ?," +
"                   ?," +
"                   ?," +
"                   ?," +
"                   ?," +
"                   ?," +
"                   ?," +
"                   ?," +
"                   ?," +
"                   ?," +
"                   ?," +
"                   ?," +
"                   ?," +
"                   ?," +
"                   ?," +
"                   ?) "
		); 

	  // put parameters into statement 
	  if (getId() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "id");
	  _stmt.setObject(1, getId(), Types.TIMESTAMP); 

	  if (getN() == null) _stmt.setNull(2, Types.SMALLINT);
	  else _stmt.setObject(2, new Integer(getN().intValue()), Types.SMALLINT); 

	  if (getIdate() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "idate");
	  _stmt.setObject(3, getIdate(), Types.DATE); 

	  if (getShipper() == null) _stmt.setNull(4, Types.VARCHAR);
	  else if (getShipper().length() > 200) throw new DAException(DAResource.INVALID_LENGTH, "shipper"); 
	  else _stmt.setObject(4, getShipper(), Types.VARCHAR); 

	  if (getConsignee() == null) _stmt.setNull(5, Types.VARCHAR);
	  else if (getConsignee().length() > 200) throw new DAException(DAResource.INVALID_LENGTH, "consignee"); 
	  else _stmt.setObject(5, getConsignee(), Types.VARCHAR); 

	  if (getNotifyaddress() == null) _stmt.setNull(6, Types.VARCHAR);
	  else if (getNotifyaddress().length() > 200) throw new DAException(DAResource.INVALID_LENGTH, "notifyaddress"); 
	  else _stmt.setObject(6, getNotifyaddress(), Types.VARCHAR); 

	  if (getShipowner() == null) _stmt.setNull(7, Types.VARCHAR);
	  else if (getShipowner().length() > 200) throw new DAException(DAResource.INVALID_LENGTH, "shipowner"); 
	  else _stmt.setObject(7, getShipowner(), Types.VARCHAR); 

	  if (getFlag() == null) _stmt.setNull(8, Types.VARCHAR);
	  else if (getFlag().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "flag"); 
	  else _stmt.setObject(8, getFlag(), Types.VARCHAR); 

	  if (getVessel() == null) _stmt.setNull(9, Types.VARCHAR);
	  else if (getVessel().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "vessel"); 
	  else _stmt.setObject(9, getVessel(), Types.VARCHAR); 

	  if (getPortofloading() == null) _stmt.setNull(10, Types.VARCHAR);
	  else if (getPortofloading().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "portofloading"); 
	  else _stmt.setObject(10, getPortofloading(), Types.VARCHAR); 

	  if (getPortofdischarge() == null) _stmt.setNull(11, Types.VARCHAR);
	  else if (getPortofdischarge().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "portofdischarge"); 
	  else _stmt.setObject(11, getPortofdischarge(), Types.VARCHAR); 

	  if (getDistination() == null) _stmt.setNull(12, Types.VARCHAR);
	  else if (getDistination().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "distination"); 
	  else _stmt.setObject(12, getDistination(), Types.VARCHAR); 

	  if (getFreight1() == null) _stmt.setNull(13, Types.VARCHAR);
	  else if (getFreight1().length() > 100) throw new DAException(DAResource.INVALID_LENGTH, "freight1"); 
	  else _stmt.setObject(13, getFreight1(), Types.VARCHAR); 

	  if (getFreight2() == null) _stmt.setNull(14, Types.VARCHAR);
	  else if (getFreight2().length() > 100) throw new DAException(DAResource.INVALID_LENGTH, "freight2"); 
	  else _stmt.setObject(14, getFreight2(), Types.VARCHAR); 

	  if (getMaster() == null) _stmt.setNull(15, Types.VARCHAR);
	  else if (getMaster().length() > 40) throw new DAException(DAResource.INVALID_LENGTH, "master"); 
	  else _stmt.setObject(15, getMaster(), Types.VARCHAR); 

	  if (getDescript() == null) _stmt.setNull(16, Types.VARCHAR);
	  else if (getDescript().length() > 400) throw new DAException(DAResource.INVALID_LENGTH, "descript"); 
	  else _stmt.setObject(16, getDescript(), Types.VARCHAR); 

	  if (getOptions() == null) _stmt.setNull(17, Types.VARCHAR);
	  else if (getOptions().length() > 240) throw new DAException(DAResource.INVALID_LENGTH, "options"); 
	  else _stmt.setObject(17, getOptions(), Types.VARCHAR); 

	  if (getBols() == null) _stmt.setNull(18, Types.VARCHAR);
	  else if (getBols().length() > 240) throw new DAException(DAResource.INVALID_LENGTH, "bols"); 
	  else _stmt.setObject(18, getBols(), Types.VARCHAR); 

	  if (getMnfstbot() == null) _stmt.setNull(19, Types.VARCHAR);
	  else if (getMnfstbot().length() > 240) throw new DAException(DAResource.INVALID_LENGTH, "mnfstbot"); 
	  else _stmt.setObject(19, getMnfstbot(), Types.VARCHAR); 

	  if (getName() == null) _stmt.setNull(20, Types.VARCHAR);
	  else if (getName().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "name"); 
	  else _stmt.setObject(20, getName(), Types.VARCHAR); 

	  if (getMarking() == null) _stmt.setNull(21, Types.VARCHAR);
	  else if (getMarking().length() > 40) throw new DAException(DAResource.INVALID_LENGTH, "marking"); 
	  else _stmt.setObject(21, getMarking(), Types.VARCHAR); 

	  if (getQuantity() == null) _stmt.setNull(22, Types.VARCHAR);
	  else if (getQuantity().length() > 40) throw new DAException(DAResource.INVALID_LENGTH, "quantity"); 
	  else _stmt.setObject(22, getQuantity(), Types.VARCHAR); 

	  if (getWeight() == null) _stmt.setNull(23, Types.VARCHAR);
	  else if (getWeight().length() > 20) throw new DAException(DAResource.INVALID_LENGTH, "weight"); 
	  else _stmt.setObject(23, getWeight(), Types.VARCHAR); 

	  if (getNamerus() == null) _stmt.setNull(24, Types.VARCHAR);
	  else if (getNamerus().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "namerus"); 
	  else _stmt.setObject(24, getNamerus(), Types.VARCHAR); 

	  if (getNote() == null) _stmt.setNull(25, Types.VARCHAR);
	  else if (getNote().length() > 20) throw new DAException(DAResource.INVALID_LENGTH, "note"); 
	  else _stmt.setObject(25, getNote(), Types.VARCHAR); 

	  if (getGross_weight() == null) _stmt.setNull(26, Types.DECIMAL);
	  else _stmt.setObject(26, getGross_weight(), Types.DECIMAL, 3); 

	  if (getNetweight() == null) _stmt.setNull(27, Types.DECIMAL);
	  else _stmt.setObject(27, getNetweight(), Types.DECIMAL, 3); 

	  if (getContract() == null) _stmt.setNull(28, Types.VARCHAR);
	  else if (getContract().length() > 10) throw new DAException(DAResource.INVALID_LENGTH, "contract"); 
	  else _stmt.setObject(28, getContract(), Types.VARCHAR); 

	  int rowsAffected = _stmt.executeUpdate(); 
	  if (rowsAffected == 0) { _stmt.close(); throw new DAException(DAResource.METHOD_AFFCTD_NOROWS); }
	  if (rowsAffected > 1) { _stmt.close(); throw new DAException(DAResource.METHOD_AFFCTD_MULTROWS); }

	  _stmt.close();
	}
	catch(SQLException exc) {
	  throw new DAException (DAResource.ERROR_IN_METHOD,"add() ", exc);
	} 
	finally {
	  _stmt = null;
	  _setBusy(false);
	}

	setModified(false); 
	_poSupport.fireUpdateComplete("add()", null); 
  }  
 //----------------------------------------------------------------
 // clone - returns a copy of the object
 //----------------------------------------------------------------
  public Object clone() {
 
	Bol obj = new Bol((BolDataId)theDataId.clone(),getObjectsDatastore());

	obj.iN = iN; 
	obj.iIdate = iIdate; 
	obj.iShipper = iShipper; 
	obj.iConsignee = iConsignee; 
	obj.iNotifyaddress = iNotifyaddress; 
	obj.iShipowner = iShipowner; 
	obj.iFlag = iFlag; 
	obj.iVessel = iVessel; 
	obj.iPortofloading = iPortofloading; 
	obj.iPortofdischarge = iPortofdischarge; 
	obj.iDistination = iDistination; 
	obj.iFreight1 = iFreight1; 
	obj.iFreight2 = iFreight2; 
	obj.iMaster = iMaster; 
	obj.iDescript = iDescript; 
	obj.iOptions = iOptions; 
	obj.iBols = iBols; 
	obj.iMnfstbot = iMnfstbot; 
	obj.iName = iName; 
	obj.iMarking = iMarking; 
	obj.iQuantity = iQuantity; 
	obj.iWeight = iWeight; 
	obj.iNamerus = iNamerus; 
	obj.iNote = iNote; 
	obj.iGross_weight = iGross_weight; 
	obj.iNetweight = iNetweight; 
	obj.iContract = iContract; 

	return obj;
  }  
  /**
	* Delete a row from the database.
	*/
  public void delete() throws DAException { 

	if ( !_onBackground() && isAsynchronous() ) {
	  Object[] params = {   };
	  _putOnBackgroundThread( "delete()", params );
	  return ;
	} 

	try { 
	  if (getCurrentDatastore() == null) throw new DAException(DAResource.NO_CONNECT_EXIST); 

	  _stmt = getCurrentDatastore().getConnection().prepareStatement(
		  "DELETE FROM " + Bol.getQualifier() + "\"BOL\" WHERE " +
"             \"ID\" = ? "
		); 

	  // put parameters into statement 
	  if (getId() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "id");
	  _stmt.setObject(1, getId(), Types.TIMESTAMP); 

	  int rowsAffected = _stmt.executeUpdate(); 
	  if (rowsAffected == 0) { _stmt.close(); throw new DAException(DAResource.METHOD_AFFCTD_NOROWS); }
	  if (rowsAffected > 1) { _stmt.close(); throw new DAException(DAResource.METHOD_AFFCTD_MULTROWS); }

	  _stmt.close();
	}
	catch(SQLException exc) {
	  throw new DAException (DAResource.ERROR_IN_METHOD,"delete() ", exc);
	} 
	finally {
	  _stmt = null;
	  _setBusy(false);
	}

	setModified(false); 
	_poSupport.fireUpdateComplete("delete()", null); 
  }  
 //----------------------------------------------------------------
 // equals - compares itself with another object
 //----------------------------------------------------------------
  public boolean equals(Object anObject) {

	if ( !(anObject instanceof Bol) ) return false;
	Bol aBol = (Bol)anObject;

	if ( !theDataId.equals(aBol.theDataId) ) return false; 

	if ( iN != aBol.iN ) {
	   if ( iN == null || aBol.iN == null) return false;
	   else if ( !iN.equals( aBol.iN ) ) return false;
	 } 
	if ( iIdate != aBol.iIdate ) {
	   if ( iIdate == null || aBol.iIdate == null) return false;
	   else if ( !iIdate.equals( aBol.iIdate ) ) return false;
	 } 
	if ( iShipper != aBol.iShipper ) {
	   if ( iShipper == null || aBol.iShipper == null) return false;
	   else if ( !iShipper.equals( aBol.iShipper ) ) return false;
	 } 
	if ( iConsignee != aBol.iConsignee ) {
	   if ( iConsignee == null || aBol.iConsignee == null) return false;
	   else if ( !iConsignee.equals( aBol.iConsignee ) ) return false;
	 } 
	if ( iNotifyaddress != aBol.iNotifyaddress ) {
	   if ( iNotifyaddress == null || aBol.iNotifyaddress == null) return false;
	   else if ( !iNotifyaddress.equals( aBol.iNotifyaddress ) ) return false;
	 } 
	if ( iShipowner != aBol.iShipowner ) {
	   if ( iShipowner == null || aBol.iShipowner == null) return false;
	   else if ( !iShipowner.equals( aBol.iShipowner ) ) return false;
	 } 
	if ( iFlag != aBol.iFlag ) {
	   if ( iFlag == null || aBol.iFlag == null) return false;
	   else if ( !iFlag.equals( aBol.iFlag ) ) return false;
	 } 
	if ( iVessel != aBol.iVessel ) {
	   if ( iVessel == null || aBol.iVessel == null) return false;
	   else if ( !iVessel.equals( aBol.iVessel ) ) return false;
	 } 
	if ( iPortofloading != aBol.iPortofloading ) {
	   if ( iPortofloading == null || aBol.iPortofloading == null) return false;
	   else if ( !iPortofloading.equals( aBol.iPortofloading ) ) return false;
	 } 
	if ( iPortofdischarge != aBol.iPortofdischarge ) {
	   if ( iPortofdischarge == null || aBol.iPortofdischarge == null) return false;
	   else if ( !iPortofdischarge.equals( aBol.iPortofdischarge ) ) return false;
	 } 
	if ( iDistination != aBol.iDistination ) {
	   if ( iDistination == null || aBol.iDistination == null) return false;
	   else if ( !iDistination.equals( aBol.iDistination ) ) return false;
	 } 
	if ( iFreight1 != aBol.iFreight1 ) {
	   if ( iFreight1 == null || aBol.iFreight1 == null) return false;
	   else if ( !iFreight1.equals( aBol.iFreight1 ) ) return false;
	 } 
	if ( iFreight2 != aBol.iFreight2 ) {
	   if ( iFreight2 == null || aBol.iFreight2 == null) return false;
	   else if ( !iFreight2.equals( aBol.iFreight2 ) ) return false;
	 } 
	if ( iMaster != aBol.iMaster ) {
	   if ( iMaster == null || aBol.iMaster == null) return false;
	   else if ( !iMaster.equals( aBol.iMaster ) ) return false;
	 } 
	if ( iDescript != aBol.iDescript ) {
	   if ( iDescript == null || aBol.iDescript == null) return false;
	   else if ( !iDescript.equals( aBol.iDescript ) ) return false;
	 } 
	if ( iOptions != aBol.iOptions ) {
	   if ( iOptions == null || aBol.iOptions == null) return false;
	   else if ( !iOptions.equals( aBol.iOptions ) ) return false;
	 } 
	if ( iBols != aBol.iBols ) {
	   if ( iBols == null || aBol.iBols == null) return false;
	   else if ( !iBols.equals( aBol.iBols ) ) return false;
	 } 
	if ( iMnfstbot != aBol.iMnfstbot ) {
	   if ( iMnfstbot == null || aBol.iMnfstbot == null) return false;
	   else if ( !iMnfstbot.equals( aBol.iMnfstbot ) ) return false;
	 } 
	if ( iName != aBol.iName ) {
	   if ( iName == null || aBol.iName == null) return false;
	   else if ( !iName.equals( aBol.iName ) ) return false;
	 } 
	if ( iMarking != aBol.iMarking ) {
	   if ( iMarking == null || aBol.iMarking == null) return false;
	   else if ( !iMarking.equals( aBol.iMarking ) ) return false;
	 } 
	if ( iQuantity != aBol.iQuantity ) {
	   if ( iQuantity == null || aBol.iQuantity == null) return false;
	   else if ( !iQuantity.equals( aBol.iQuantity ) ) return false;
	 } 
	if ( iWeight != aBol.iWeight ) {
	   if ( iWeight == null || aBol.iWeight == null) return false;
	   else if ( !iWeight.equals( aBol.iWeight ) ) return false;
	 } 
	if ( iNamerus != aBol.iNamerus ) {
	   if ( iNamerus == null || aBol.iNamerus == null) return false;
	   else if ( !iNamerus.equals( aBol.iNamerus ) ) return false;
	 } 
	if ( iNote != aBol.iNote ) {
	   if ( iNote == null || aBol.iNote == null) return false;
	   else if ( !iNote.equals( aBol.iNote ) ) return false;
	 } 
	if ( iGross_weight != aBol.iGross_weight ) {
	   if ( iGross_weight == null || aBol.iGross_weight == null) return false;
	   else if ( !iGross_weight.equals( aBol.iGross_weight ) ) return false;
	 } 
	if ( iNetweight != aBol.iNetweight ) {
	   if ( iNetweight == null || aBol.iNetweight == null) return false;
	   else if ( !iNetweight.equals( aBol.iNetweight ) ) return false;
	 } 
	if ( iContract != aBol.iContract ) {
	   if ( iContract == null || aBol.iContract == null) return false;
	   else if ( !iContract.equals( aBol.iContract ) ) return false;
	 } 

	return true;
  }  
  public Object[] getAttributes() {
	Object[] o = {getId(),
			getN(),
			getIdate(),
			getShipper(),
			getConsignee(),
			getNotifyaddress(),
			getShipowner(),
			getFlag(),
			getVessel(),
			getPortofloading(),
			getPortofdischarge(),
			getDistination(),
			getFreight1(),
			getFreight2(),
			getMaster(),
			getDescript(),
			getOptions(),
			getBols(),
			getMnfstbot(),
			getName(),
			getMarking(),
			getQuantity(),
			getWeight(),
			getNamerus(),
			getNote(),
			getGross_weight(),
			getNetweight(),
			getContract() };
	return (o);
  }  
  public String[] getAttributeStrings() {
	String[] s = {String.valueOf(getId()),
			String.valueOf(getN()),
			String.valueOf(getIdate()),
			getShipper(),
			getConsignee(),
			getNotifyaddress(),
			getShipowner(),
			getFlag(),
			getVessel(),
			getPortofloading(),
			getPortofdischarge(),
			getDistination(),
			getFreight1(),
			getFreight2(),
			getMaster(),
			getDescript(),
			getOptions(),
			getBols(),
			getMnfstbot(),
			getName(),
			getMarking(),
			getQuantity(),
			getWeight(),
			getNamerus(),
			getNote(),
			String.valueOf(getGross_weight()),
			String.valueOf(getNetweight()),
			getContract() };
	return (s);
  }  
   public String getBols() { return iBols; }   
   public String getConsignee() { return iConsignee; }   
   public String getContract() { return iContract; }   
  public DatastoreJDBC getCurrentDatastore() {
	if (getObjectsDatastore() != null) return getObjectsDatastore();
	else if (getDefaultDatastore() != null) return getDefaultDatastore();
	else return DatastoreJDBC.getApplicationDatastore();
  }  
 //----------------------------------------------------------------
 // BolDataId
 //----------------------------------------------------------------
  public BolDataId getDataId() { return theDataId; }  
 //----------------------------------------------------------------
 // Default Datastore
 //----------------------------------------------------------------
  public static DatastoreJDBC getDefaultDatastore() { return iBolDatastore; }  
   public String getDescript() { return iDescript; }   
   public String getDistination() { return iDistination; }   
   public String getFlag() { return iFlag; }   
   public String getFreight1() { return iFreight1; }   
   public String getFreight2() { return iFreight2; }   
   public Double getGross_weight() { return iGross_weight; }   
  //----------------------------------------------------------------
  // BolDataId id access methods
  //----------------------------------------------------------------
   public Timestamp getId() { return theDataId.getId(); }   
   public java.sql.Date getIdate() { return iIdate; }   
   public String getMarking() { return iMarking; }   
   public String getMaster() { return iMaster; }   
   public String getMnfstbot() { return iMnfstbot; }   
   public Short getN() { return iN; }   
   public String getName() { return iName; }   
   public String getNamerus() { return iNamerus; }   
   public Double getNetweight() { return iNetweight; }   
   public String getNote() { return iNote; }   
   public String getNotifyaddress() { return iNotifyaddress; }   
  public PODataId getObjectDataId() { return theDataId; }  
   public String getOptions() { return iOptions; }   
   public String getPortofdischarge() { return iPortofdischarge; }   
   public String getPortofloading() { return iPortofloading; }   
  public static String getQualifier() { return _qualifier; }  
   public String getQuantity() { return iQuantity; }   
   public String getShipowner() { return iShipowner; }   
   public String getShipper() { return iShipper; }   
   public String getVessel() { return iVessel; }   
   public String getWeight() { return iWeight; }   
  public boolean hasDataId() { return true; }  
  /**
	* Для вставки в BOL записи
	*/
  public static void insert(short n, java.sql.Date idate, String shipper, String consignee, String notifyaddress, String shipowner, String flag, String vessel, String portofloading, String portofdischarge, String distination, String freight1, String master, String descript, String options, String bols, String mnfstbot, String name, String marking, String quantity, String weight, String namerus, String note, BigDecimal gross_weight, BigDecimal netweight, String contract) throws DAException { 

	try { 
	  if (_getStaticDatastore() == null) throw new DAException(DAResource.NO_CONNECT_EXIST); 

	  PreparedStatement stmt = _getStaticDatastore().getConnection().prepareStatement(
		  "INSERT INTO ildar.Bol (" +
"      N, IDATE, SHIPPER, CONSIGNEE, NOTIFYADDRESS," +
"      SHIPOWNER, FLAG, VESSEL, PORTOFLOADING, PORTOFDISCHARGE," +
"      DISTINATION, FREIGHT1, MASTER, DESCRIPT, OPTIONS," +
"      BOLS, MNFSTBOT, NAME, MARKING, QUANTITY,WEIGHT," +
"      NAMERUS, NOTE, GROSS_WEIGHT,NETWEIGHT, CONTRACT)" +
"   VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); "
		); 

	  // put parameters into statement 
	  stmt.setObject(1, new Integer((int)n), Types.SMALLINT);

	  if (idate == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "idate");
	  stmt.setObject(2, idate, Types.DATE); 

	  if (shipper == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "shipper");
	  if (shipper.length() > 200) throw new DAException(DAResource.INVALID_LENGTH, "shipper"); 
	  stmt.setObject(3, shipper, Types.VARCHAR); 

	  if (consignee == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "consignee");
	  if (consignee.length() > 200) throw new DAException(DAResource.INVALID_LENGTH, "consignee"); 
	  stmt.setObject(4, consignee, Types.VARCHAR); 

	  if (notifyaddress == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "notifyaddress");
	  if (notifyaddress.length() > 200) throw new DAException(DAResource.INVALID_LENGTH, "notifyaddress"); 
	  stmt.setObject(5, notifyaddress, Types.VARCHAR); 

	  if (shipowner == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "shipowner");
	  if (shipowner.length() > 200) throw new DAException(DAResource.INVALID_LENGTH, "shipowner"); 
	  stmt.setObject(6, shipowner, Types.VARCHAR); 

	  if (flag == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "flag");
	  if (flag.length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "flag"); 
	  stmt.setObject(7, flag, Types.VARCHAR); 

	  if (vessel == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "vessel");
	  if (vessel.length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "vessel"); 
	  stmt.setObject(8, vessel, Types.VARCHAR); 

	  if (portofloading == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "portofloading");
	  if (portofloading.length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "portofloading"); 
	  stmt.setObject(9, portofloading, Types.VARCHAR); 

	  if (portofdischarge == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "portofdischarge");
	  if (portofdischarge.length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "portofdischarge"); 
	  stmt.setObject(10, portofdischarge, Types.VARCHAR); 

	  if (distination == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "distination");
	  if (distination.length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "distination"); 
	  stmt.setObject(11, distination, Types.VARCHAR); 

	  if (freight1 == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "freight1");
	  if (freight1.length() > 100) throw new DAException(DAResource.INVALID_LENGTH, "freight1"); 
	  stmt.setObject(12, freight1, Types.VARCHAR); 

	  if (master == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "master");
	  if (master.length() > 40) throw new DAException(DAResource.INVALID_LENGTH, "master"); 
	  stmt.setObject(13, master, Types.VARCHAR); 

	  if (descript == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "descript");
	  if (descript.length() > 400) throw new DAException(DAResource.INVALID_LENGTH, "descript"); 
	  stmt.setObject(14, descript, Types.VARCHAR); 

	  if (options == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "options");
	  if (options.length() > 240) throw new DAException(DAResource.INVALID_LENGTH, "options"); 
	  stmt.setObject(15, options, Types.VARCHAR); 

	  if (bols == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "bols");
	  if (bols.length() > 240) throw new DAException(DAResource.INVALID_LENGTH, "bols"); 
	  stmt.setObject(16, bols, Types.VARCHAR); 

	  if (mnfstbot == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "mnfstbot");
	  if (mnfstbot.length() > 240) throw new DAException(DAResource.INVALID_LENGTH, "mnfstbot"); 
	  stmt.setObject(17, mnfstbot, Types.VARCHAR); 

	  if (name == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "name");
	  if (name.length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "name"); 
	  stmt.setObject(18, name, Types.VARCHAR); 

	  if (marking == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "marking");
	  if (marking.length() > 40) throw new DAException(DAResource.INVALID_LENGTH, "marking"); 
	  stmt.setObject(19, marking, Types.VARCHAR); 

	  if (quantity == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "quantity");
	  if (quantity.length() > 40) throw new DAException(DAResource.INVALID_LENGTH, "quantity"); 
	  stmt.setObject(20, quantity, Types.VARCHAR); 

	  if (weight == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "weight");
	  if (weight.length() > 20) throw new DAException(DAResource.INVALID_LENGTH, "weight"); 
	  stmt.setObject(21, weight, Types.VARCHAR); 

	  if (namerus == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "namerus");
	  if (namerus.length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "namerus"); 
	  stmt.setObject(22, namerus, Types.VARCHAR); 

	  if (note == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "note");
	  if (note.length() > 20) throw new DAException(DAResource.INVALID_LENGTH, "note"); 
	  stmt.setObject(23, note, Types.VARCHAR); 

	  if (gross_weight == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "gross_weight");
	  stmt.setObject(24, gross_weight, Types.DECIMAL, gross_weight.scale()); 

	  if (netweight == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "netweight");
	  stmt.setObject(25, netweight, Types.DECIMAL, netweight.scale()); 

	  if (contract == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "contract");
	  if (contract.length() > 10) throw new DAException(DAResource.INVALID_LENGTH, "contract"); 
	  stmt.setObject(26, contract, Types.VARCHAR); 

	  int rowsAffected = stmt.executeUpdate(); 
	  if (rowsAffected == 0) { stmt.close(); throw new DAException(DAResource.METHOD_AFFCTD_NOROWS); }
	  if (rowsAffected > 1) { stmt.close(); throw new DAException(DAResource.METHOD_AFFCTD_MULTROWS); }

	  stmt.close();
	}
	catch(SQLException exc) {
	  throw new DAException (DAResource.ERROR_IN_METHOD,"insert(short, java.sql.Date, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, BigDecimal, BigDecimal, String) ", exc);
	} 
  }  
   public boolean isBolsNullable() { return true; }   
   public boolean isConsigneeNullable() { return true; }   
   public boolean isContractNullable() { return true; }   
   public boolean isDescriptNullable() { return true; }   
   public boolean isDistinationNullable() { return true; }   
   public boolean isFlagNullable() { return true; }   
   public boolean isFreight1Nullable() { return true; }   
   public boolean isFreight2Nullable() { return true; }   
   public boolean isGross_weightNullable() { return true; }   
   public boolean isIdateNullable() { return false; }   
   public boolean isIdNullable() { return false; }   
   public boolean isMarkingNullable() { return true; }   
   public boolean isMasterNullable() { return true; }   
   public boolean isMnfstbotNullable() { return true; }   
  public boolean isModified() {
	return super.isModified() || theDataId.isModified();
  }  
   public boolean isNameNullable() { return true; }   
   public boolean isNamerusNullable() { return true; }   
   public boolean isNetweightNullable() { return true; }   
   public boolean isNNullable() { return true; }   
   public boolean isNoteNullable() { return true; }   
   public boolean isNotifyaddressNullable() { return true; }   
   public boolean isOptionsNullable() { return true; }   
   public boolean isPortofdischargeNullable() { return true; }   
   public boolean isPortofloadingNullable() { return true; }   
   public boolean isQuantityNullable() { return true; }   
  public boolean isReadOnly() { return false; }  
   public boolean isShipownerNullable() { return true; }   
   public boolean isShipperNullable() { return true; }   
   public boolean isVesselNullable() { return true; }   
   public boolean isWeightNullable() { return true; }   
  /**
	* Retrieve a row from the database.
	*/
  public void retrieve() throws DAException { 

	if ( !_onBackground() && isAsynchronous() ) {
	  Object[] params = {   };
	  _putOnBackgroundThread( "retrieve()", params );
	  return ;
	} 

	try { 
	  if (getCurrentDatastore() == null) throw new DAException(DAResource.NO_CONNECT_EXIST); 

	  _stmt = getCurrentDatastore().getConnection().prepareStatement(
		  "SELECT " +
"             \"N\"," +
"             \"IDATE\"," +
"             \"SHIPPER\"," +
"             \"CONSIGNEE\"," +
"             \"NOTIFYADDRESS\"," +
"             \"SHIPOWNER\"," +
"             \"FLAG\"," +
"             \"VESSEL\"," +
"             \"PORTOFLOADING\"," +
"             \"PORTOFDISCHARGE\"," +
"             \"DISTINATION\"," +
"             \"FREIGHT1\"," +
"             \"FREIGHT2\"," +
"             \"MASTER\"," +
"             \"DESCRIPT\"," +
"             \"OPTIONS\"," +
"             \"BOLS\"," +
"             \"MNFSTBOT\"," +
"             \"NAME\"," +
"             \"MARKING\"," +
"             \"QUANTITY\"," +
"             \"WEIGHT\"," +
"             \"NAMERUS\"," +
"             \"NOTE\"," +
"             \"GROSS_WEIGHT\"," +
"             \"NETWEIGHT\"," +
"             \"CONTRACT\"" +
"         FROM " + Bol.getQualifier() + "\"BOL\" WHERE " +
"             \"ID\" = ? "
		); 

	  // put parameters into statement 
	  if (getId() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "id");
	  _stmt.setObject(1, getId(), Types.TIMESTAMP); 

	  ResultSet rs = _stmt.executeQuery();
	  if (!rs.next()) { _stmt.close(); throw new DAException(DAResource.METHOD_NO_RESULTS); }

	  // get output from result set 
	  _setN(new Short(rs.getShort(1)));
	  if (rs.wasNull()) _setN(null);
	  _setIdate(rs.getDate(2));
	  if (rs.wasNull()) _setIdate(null);
	  _setShipper(rs.getString(3));
	  if (rs.wasNull()) _setShipper(null);
	  _setConsignee(rs.getString(4));
	  if (rs.wasNull()) _setConsignee(null);
	  _setNotifyaddress(rs.getString(5));
	  if (rs.wasNull()) _setNotifyaddress(null);
	  _setShipowner(rs.getString(6));
	  if (rs.wasNull()) _setShipowner(null);
	  _setFlag(rs.getString(7));
	  if (rs.wasNull()) _setFlag(null);
	  _setVessel(rs.getString(8));
	  if (rs.wasNull()) _setVessel(null);
	  _setPortofloading(rs.getString(9));
	  if (rs.wasNull()) _setPortofloading(null);
	  _setPortofdischarge(rs.getString(10));
	  if (rs.wasNull()) _setPortofdischarge(null);
	  _setDistination(rs.getString(11));
	  if (rs.wasNull()) _setDistination(null);
	  _setFreight1(rs.getString(12));
	  if (rs.wasNull()) _setFreight1(null);
	  _setFreight2(rs.getString(13));
	  if (rs.wasNull()) _setFreight2(null);
	  _setMaster(rs.getString(14));
	  if (rs.wasNull()) _setMaster(null);
	  _setDescript(rs.getString(15));
	  if (rs.wasNull()) _setDescript(null);
	  _setOptions(rs.getString(16));
	  if (rs.wasNull()) _setOptions(null);
	  _setBols(rs.getString(17));
	  if (rs.wasNull()) _setBols(null);
	  _setMnfstbot(rs.getString(18));
	  if (rs.wasNull()) _setMnfstbot(null);
	  _setName(rs.getString(19));
	  if (rs.wasNull()) _setName(null);
	  _setMarking(rs.getString(20));
	  if (rs.wasNull()) _setMarking(null);
	  _setQuantity(rs.getString(21));
	  if (rs.wasNull()) _setQuantity(null);
	  _setWeight(rs.getString(22));
	  if (rs.wasNull()) _setWeight(null);
	  _setNamerus(rs.getString(23));
	  if (rs.wasNull()) _setNamerus(null);
	  _setNote(rs.getString(24));
	  if (rs.wasNull()) _setNote(null);
	  _setGross_weight(new Double(rs.getDouble(25)));
	  if (rs.wasNull()) _setGross_weight(null);
	  _setNetweight(new Double(rs.getDouble(26)));
	  if (rs.wasNull()) _setNetweight(null);
	  _setContract(rs.getString(27));
	  if (rs.wasNull()) _setContract(null);

	  _stmt.close();
	}
	catch(SQLException exc) {
	  throw new DAException (DAResource.ERROR_IN_METHOD,"retrieve() ", exc);
	} 
	finally {
	  _stmt = null;
	  _setBusy(false);
	}

	setModified(false); 
	_poSupport.fireRetrieveComplete("retrieve()", null); 
  }  
  void setAllModified() {
	for(int i=0; i < modified.length; i++) modified[i] = true;
  }  
   public void setBols(String aBols) { 
	 String temp = iBols; 
	 modified[16] = true;
	 iBols = aBols; 
	 setModified(true);
	 _changes.firePropertyChange("bols",  temp, aBols); 
   }   
   public void setConsignee(String aConsignee) { 
	 String temp = iConsignee; 
	 modified[3] = true;
	 iConsignee = aConsignee; 
	 setModified(true);
	 _changes.firePropertyChange("consignee",  temp, aConsignee); 
   }   
   public void setContract(String aContract) { 
	 String temp = iContract; 
	 modified[26] = true;
	 iContract = aContract; 
	 setModified(true);
	 _changes.firePropertyChange("contract",  temp, aContract); 
   }   
  public void setDataId(BolDataId aDataId) throws DAException {
	if (aDataId == null) throw new DAException(DAResource.CANT_SET_DATAID_NULL);

	BolDataId tempDataId = theDataId;

	theDataId = aDataId;
	iDataIdAdapter.setSource(theDataId);

	setModified(true);
	for(int i=0; i < theDataId.modified.length; i++) theDataId.modified[i] = true;

	// fire property change events for the dataid and its properties
	firePropertyChange("dataId", tempDataId, aDataId); 
	firePropertyChange("id", tempDataId.getId(), aDataId.getId()); 

  }  
  public static void setDefaultDatastore(DatastoreJDBC aDatastore) { iBolDatastore = aDatastore; }  
   public void setDescript(String aDescript) { 
	 String temp = iDescript; 
	 modified[14] = true;
	 iDescript = aDescript; 
	 setModified(true);
	 _changes.firePropertyChange("descript",  temp, aDescript); 
   }   
   public void setDistination(String aDistination) { 
	 String temp = iDistination; 
	 modified[10] = true;
	 iDistination = aDistination; 
	 setModified(true);
	 _changes.firePropertyChange("distination",  temp, aDistination); 
   }   
   public void setFlag(String aFlag) { 
	 String temp = iFlag; 
	 modified[6] = true;
	 iFlag = aFlag; 
	 setModified(true);
	 _changes.firePropertyChange("flag",  temp, aFlag); 
   }   
   public void setFreight1(String aFreight1) { 
	 String temp = iFreight1; 
	 modified[11] = true;
	 iFreight1 = aFreight1; 
	 setModified(true);
	 _changes.firePropertyChange("freight1",  temp, aFreight1); 
   }   
   public void setFreight2(String aFreight2) { 
	 String temp = iFreight2; 
	 modified[12] = true;
	 iFreight2 = aFreight2; 
	 setModified(true);
	 _changes.firePropertyChange("freight2",  temp, aFreight2); 
   }   
   public void setGross_weight(Double aGross_weight) { 
	 Double temp = iGross_weight; 
	 modified[24] = true;
	 iGross_weight = aGross_weight; 
	 setModified(true);
	 _changes.firePropertyChange("gross_weight",  temp, aGross_weight); 
   }   
   public void setId(Timestamp aId) { theDataId.setId(aId); }   
   public void setIdate(java.sql.Date aIdate) { 
	 java.sql.Date temp = iIdate; 
	 modified[1] = true;
	 iIdate = aIdate; 
	 setModified(true);
	 _changes.firePropertyChange("idate",  temp, aIdate); 
   }   
   public void setMarking(String aMarking) { 
	 String temp = iMarking; 
	 modified[19] = true;
	 iMarking = aMarking; 
	 setModified(true);
	 _changes.firePropertyChange("marking",  temp, aMarking); 
   }   
   public void setMaster(String aMaster) { 
	 String temp = iMaster; 
	 modified[13] = true;
	 iMaster = aMaster; 
	 setModified(true);
	 _changes.firePropertyChange("master",  temp, aMaster); 
   }   
   public void setMnfstbot(String aMnfstbot) { 
	 String temp = iMnfstbot; 
	 modified[17] = true;
	 iMnfstbot = aMnfstbot; 
	 setModified(true);
	 _changes.firePropertyChange("mnfstbot",  temp, aMnfstbot); 
   }   
  public void setModified(boolean enable) {
	if ( !enable ) { 
	  theDataId.setModified(false); 
	  for(int i=0; i < modified.length; i++) modified[i] = false;
	}

	super.setModified(enable);
  }  
   public void setN(Short aN) { 
	 Short temp = iN; 
	 modified[0] = true;
	 iN = aN; 
	 setModified(true);
	 _changes.firePropertyChange("n",  temp, aN); 
   }   
   public void setName(String aName) { 
	 String temp = iName; 
	 modified[18] = true;
	 iName = aName; 
	 setModified(true);
	 _changes.firePropertyChange("name",  temp, aName); 
   }   
   public void setNamerus(String aNamerus) { 
	 String temp = iNamerus; 
	 modified[22] = true;
	 iNamerus = aNamerus; 
	 setModified(true);
	 _changes.firePropertyChange("namerus",  temp, aNamerus); 
   }   
   public void setNetweight(Double aNetweight) { 
	 Double temp = iNetweight; 
	 modified[25] = true;
	 iNetweight = aNetweight; 
	 setModified(true);
	 _changes.firePropertyChange("netweight",  temp, aNetweight); 
   }   
   public void setNote(String aNote) { 
	 String temp = iNote; 
	 modified[23] = true;
	 iNote = aNote; 
	 setModified(true);
	 _changes.firePropertyChange("note",  temp, aNote); 
   }   
   public void setNotifyaddress(String aNotifyaddress) { 
	 String temp = iNotifyaddress; 
	 modified[4] = true;
	 iNotifyaddress = aNotifyaddress; 
	 setModified(true);
	 _changes.firePropertyChange("notifyaddress",  temp, aNotifyaddress); 
   }   
  public void setObjectDataId(PODataId aDataId) throws DAException {
	setDataId((BolDataId)aDataId);
  }  
   public void setOptions(String aOptions) { 
	 String temp = iOptions; 
	 modified[15] = true;
	 iOptions = aOptions; 
	 setModified(true);
	 _changes.firePropertyChange("options",  temp, aOptions); 
   }   
   public void setPortofdischarge(String aPortofdischarge) { 
	 String temp = iPortofdischarge; 
	 modified[9] = true;
	 iPortofdischarge = aPortofdischarge; 
	 setModified(true);
	 _changes.firePropertyChange("portofdischarge",  temp, aPortofdischarge); 
   }   
   public void setPortofloading(String aPortofloading) { 
	 String temp = iPortofloading; 
	 modified[8] = true;
	 iPortofloading = aPortofloading; 
	 setModified(true);
	 _changes.firePropertyChange("portofloading",  temp, aPortofloading); 
   }   
 //----------------------------------------------------------------
 // methods for setting the tablename dynamically
 //----------------------------------------------------------------
  public static void setQualifier(String qual) {
	if (qual == null) _qualifier = "";
	else if (qual.equals("")) _qualifier = qual;
	else if (!qual.endsWith(".")) _qualifier = qual + ".";
	else _qualifier = qual;
  }  
   public void setQuantity(String aQuantity) { 
	 String temp = iQuantity; 
	 modified[20] = true;
	 iQuantity = aQuantity; 
	 setModified(true);
	 _changes.firePropertyChange("quantity",  temp, aQuantity); 
   }   
   public void setShipowner(String aShipowner) { 
	 String temp = iShipowner; 
	 modified[5] = true;
	 iShipowner = aShipowner; 
	 setModified(true);
	 _changes.firePropertyChange("shipowner",  temp, aShipowner); 
   }   
   public void setShipper(String aShipper) { 
	 String temp = iShipper; 
	 modified[2] = true;
	 iShipper = aShipper; 
	 setModified(true);
	 _changes.firePropertyChange("shipper",  temp, aShipper); 
   }   
   public void setVessel(String aVessel) { 
	 String temp = iVessel; 
	 modified[7] = true;
	 iVessel = aVessel; 
	 setModified(true);
	 _changes.firePropertyChange("vessel",  temp, aVessel); 
   }   
   public void setWeight(String aWeight) { 
	 String temp = iWeight; 
	 modified[21] = true;
	 iWeight = aWeight; 
	 setModified(true);
	 _changes.firePropertyChange("weight",  temp, aWeight); 
   }   
  public String toString() { return toString("."); }  
 //----------------------------------------------------------------
 // Display methods
 //----------------------------------------------------------------
  public String toString(String aSeparator)
  {
	return (String.valueOf(getId()) + aSeparator + 
			String.valueOf(getN()) + aSeparator + 
			String.valueOf(getIdate()) + aSeparator + 
			getShipper() + aSeparator + 
			getConsignee() + aSeparator + 
			getNotifyaddress() + aSeparator + 
			getShipowner() + aSeparator + 
			getFlag() + aSeparator + 
			getVessel() + aSeparator + 
			getPortofloading() + aSeparator + 
			getPortofdischarge() + aSeparator + 
			getDistination() + aSeparator + 
			getFreight1() + aSeparator + 
			getFreight2() + aSeparator + 
			getMaster() + aSeparator + 
			getDescript() + aSeparator + 
			getOptions() + aSeparator + 
			getBols() + aSeparator + 
			getMnfstbot() + aSeparator + 
			getName() + aSeparator + 
			getMarking() + aSeparator + 
			getQuantity() + aSeparator + 
			getWeight() + aSeparator + 
			getNamerus() + aSeparator + 
			getNote() + aSeparator + 
			String.valueOf(getGross_weight()) + aSeparator + 
			String.valueOf(getNetweight()) + aSeparator + 
			getContract());
  }  
  public void update() throws DAException {

	if ( !_onBackground() && isAsynchronous() ) {
	  _putOnBackgroundThread( "update()", null );
	  return;
	}

	try {
	  if (getCurrentDatastore() == null) throw new DAException(DAResource.NO_CONNECT_EXIST);
	  if (!isModified()) throw new DAException(DAResource.NO_CHANGES_MADE);
	  if (theDataId.isModified()) setAllModified();

	  _stmt = getCurrentDatastore().getConnection().prepareStatement(
		  generator.genUpdate(getQualifier(), modified)
		);

	  int index=1; 

	  if (modified[0]) { 
		if (getN() == null) _stmt.setNull(index++, Types.SMALLINT);
		else _stmt.setObject(index++, new Integer(getN().intValue()), Types.SMALLINT); 
	  }

	  if (modified[1]) { 
		if (getIdate() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "idate");
		_stmt.setObject(index++, getIdate(), Types.DATE); 
	  }

	  if (modified[2]) { 
		if (getShipper() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getShipper().length() > 200) throw new DAException(DAResource.INVALID_LENGTH, "shipper"); 
		else _stmt.setObject(index++, getShipper(), Types.VARCHAR); 
	  }

	  if (modified[3]) { 
		if (getConsignee() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getConsignee().length() > 200) throw new DAException(DAResource.INVALID_LENGTH, "consignee"); 
		else _stmt.setObject(index++, getConsignee(), Types.VARCHAR); 
	  }

	  if (modified[4]) { 
		if (getNotifyaddress() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getNotifyaddress().length() > 200) throw new DAException(DAResource.INVALID_LENGTH, "notifyaddress"); 
		else _stmt.setObject(index++, getNotifyaddress(), Types.VARCHAR); 
	  }

	  if (modified[5]) { 
		if (getShipowner() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getShipowner().length() > 200) throw new DAException(DAResource.INVALID_LENGTH, "shipowner"); 
		else _stmt.setObject(index++, getShipowner(), Types.VARCHAR); 
	  }

	  if (modified[6]) { 
		if (getFlag() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getFlag().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "flag"); 
		else _stmt.setObject(index++, getFlag(), Types.VARCHAR); 
	  }

	  if (modified[7]) { 
		if (getVessel() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getVessel().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "vessel"); 
		else _stmt.setObject(index++, getVessel(), Types.VARCHAR); 
	  }

	  if (modified[8]) { 
		if (getPortofloading() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getPortofloading().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "portofloading"); 
		else _stmt.setObject(index++, getPortofloading(), Types.VARCHAR); 
	  }

	  if (modified[9]) { 
		if (getPortofdischarge() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getPortofdischarge().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "portofdischarge"); 
		else _stmt.setObject(index++, getPortofdischarge(), Types.VARCHAR); 
	  }

	  if (modified[10]) { 
		if (getDistination() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getDistination().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "distination"); 
		else _stmt.setObject(index++, getDistination(), Types.VARCHAR); 
	  }

	  if (modified[11]) { 
		if (getFreight1() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getFreight1().length() > 100) throw new DAException(DAResource.INVALID_LENGTH, "freight1"); 
		else _stmt.setObject(index++, getFreight1(), Types.VARCHAR); 
	  }

	  if (modified[12]) { 
		if (getFreight2() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getFreight2().length() > 100) throw new DAException(DAResource.INVALID_LENGTH, "freight2"); 
		else _stmt.setObject(index++, getFreight2(), Types.VARCHAR); 
	  }

	  if (modified[13]) { 
		if (getMaster() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getMaster().length() > 40) throw new DAException(DAResource.INVALID_LENGTH, "master"); 
		else _stmt.setObject(index++, getMaster(), Types.VARCHAR); 
	  }

	  if (modified[14]) { 
		if (getDescript() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getDescript().length() > 400) throw new DAException(DAResource.INVALID_LENGTH, "descript"); 
		else _stmt.setObject(index++, getDescript(), Types.VARCHAR); 
	  }

	  if (modified[15]) { 
		if (getOptions() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getOptions().length() > 240) throw new DAException(DAResource.INVALID_LENGTH, "options"); 
		else _stmt.setObject(index++, getOptions(), Types.VARCHAR); 
	  }

	  if (modified[16]) { 
		if (getBols() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getBols().length() > 240) throw new DAException(DAResource.INVALID_LENGTH, "bols"); 
		else _stmt.setObject(index++, getBols(), Types.VARCHAR); 
	  }

	  if (modified[17]) { 
		if (getMnfstbot() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getMnfstbot().length() > 240) throw new DAException(DAResource.INVALID_LENGTH, "mnfstbot"); 
		else _stmt.setObject(index++, getMnfstbot(), Types.VARCHAR); 
	  }

	  if (modified[18]) { 
		if (getName() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getName().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "name"); 
		else _stmt.setObject(index++, getName(), Types.VARCHAR); 
	  }

	  if (modified[19]) { 
		if (getMarking() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getMarking().length() > 40) throw new DAException(DAResource.INVALID_LENGTH, "marking"); 
		else _stmt.setObject(index++, getMarking(), Types.VARCHAR); 
	  }

	  if (modified[20]) { 
		if (getQuantity() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getQuantity().length() > 40) throw new DAException(DAResource.INVALID_LENGTH, "quantity"); 
		else _stmt.setObject(index++, getQuantity(), Types.VARCHAR); 
	  }

	  if (modified[21]) { 
		if (getWeight() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getWeight().length() > 20) throw new DAException(DAResource.INVALID_LENGTH, "weight"); 
		else _stmt.setObject(index++, getWeight(), Types.VARCHAR); 
	  }

	  if (modified[22]) { 
		if (getNamerus() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getNamerus().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "namerus"); 
		else _stmt.setObject(index++, getNamerus(), Types.VARCHAR); 
	  }

	  if (modified[23]) { 
		if (getNote() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getNote().length() > 20) throw new DAException(DAResource.INVALID_LENGTH, "note"); 
		else _stmt.setObject(index++, getNote(), Types.VARCHAR); 
	  }

	  if (modified[24]) { 
		if (getGross_weight() == null) _stmt.setNull(index++, Types.DECIMAL);
		else _stmt.setObject(index++, getGross_weight(), Types.DECIMAL, 3); 
	  }

	  if (modified[25]) { 
		if (getNetweight() == null) _stmt.setNull(index++, Types.DECIMAL);
		else _stmt.setObject(index++, getNetweight(), Types.DECIMAL, 3); 
	  }

	  if (modified[26]) { 
		if (getContract() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getContract().length() > 10) throw new DAException(DAResource.INVALID_LENGTH, "contract"); 
		else _stmt.setObject(index++, getContract(), Types.VARCHAR); 
	  }

	  if (getId() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "id");
	  _stmt.setObject(index++, getId(), Types.TIMESTAMP); 

	  int rowsAffected = _stmt.executeUpdate();
	  _stmt.close();
	  if (rowsAffected == 0) throw new DAException(DAResource.METHOD_AFFCTD_NOROWS);
	  if (rowsAffected > 1) throw new DAException(DAResource.METHOD_AFFCTD_MULTROWS);

	} catch(SQLException exc) {
	  throw new DAException (DAResource.ERROR_IN_METHOD,"update() ", exc);
	} finally {
	  _stmt = null;
	  _setBusy(false);
	}

	setModified(false);
	_poSupport.fireUpdateComplete("update()", null);
  }  
 //----------------------------------------------------------------
 // Database access methods
 //----------------------------------------------------------------

  public void update(BolDataId aDataId) throws DAException {

	if ( !_onBackground() && isAsynchronous() ) {
	  Object[] params = {aDataId};
	  _putOnBackgroundThread( "update(dataId)", params );
	  return;
	}

	try {
	  if (getCurrentDatastore() == null) throw new DAException(DAResource.NO_CONNECT_EXIST);
	  if (aDataId == null) throw new DAException(DAResource.CANT_SET_DATAID_NULL);
	  if (theDataId.isModified()) setAllModified();

	  _stmt = getCurrentDatastore().getConnection().prepareStatement(
		  generator.genUpdateDataId(getQualifier(), modified)
		);

	  int index=1; 

	  if (aDataId.getId() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "id");
	  _stmt.setObject(index++, aDataId.getId(), Types.TIMESTAMP); 

	  if (modified[0]) { 
		if (getN() == null) _stmt.setNull(index++, Types.SMALLINT);
		else _stmt.setObject(index++, new Integer(getN().intValue()), Types.SMALLINT); 
	  }

	  if (modified[1]) { 
		if (getIdate() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "idate");
		_stmt.setObject(index++, getIdate(), Types.DATE); 
	  }

	  if (modified[2]) { 
		if (getShipper() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getShipper().length() > 200) throw new DAException(DAResource.INVALID_LENGTH, "shipper"); 
		else _stmt.setObject(index++, getShipper(), Types.VARCHAR); 
	  }

	  if (modified[3]) { 
		if (getConsignee() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getConsignee().length() > 200) throw new DAException(DAResource.INVALID_LENGTH, "consignee"); 
		else _stmt.setObject(index++, getConsignee(), Types.VARCHAR); 
	  }

	  if (modified[4]) { 
		if (getNotifyaddress() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getNotifyaddress().length() > 200) throw new DAException(DAResource.INVALID_LENGTH, "notifyaddress"); 
		else _stmt.setObject(index++, getNotifyaddress(), Types.VARCHAR); 
	  }

	  if (modified[5]) { 
		if (getShipowner() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getShipowner().length() > 200) throw new DAException(DAResource.INVALID_LENGTH, "shipowner"); 
		else _stmt.setObject(index++, getShipowner(), Types.VARCHAR); 
	  }

	  if (modified[6]) { 
		if (getFlag() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getFlag().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "flag"); 
		else _stmt.setObject(index++, getFlag(), Types.VARCHAR); 
	  }

	  if (modified[7]) { 
		if (getVessel() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getVessel().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "vessel"); 
		else _stmt.setObject(index++, getVessel(), Types.VARCHAR); 
	  }

	  if (modified[8]) { 
		if (getPortofloading() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getPortofloading().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "portofloading"); 
		else _stmt.setObject(index++, getPortofloading(), Types.VARCHAR); 
	  }

	  if (modified[9]) { 
		if (getPortofdischarge() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getPortofdischarge().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "portofdischarge"); 
		else _stmt.setObject(index++, getPortofdischarge(), Types.VARCHAR); 
	  }

	  if (modified[10]) { 
		if (getDistination() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getDistination().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "distination"); 
		else _stmt.setObject(index++, getDistination(), Types.VARCHAR); 
	  }

	  if (modified[11]) { 
		if (getFreight1() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getFreight1().length() > 100) throw new DAException(DAResource.INVALID_LENGTH, "freight1"); 
		else _stmt.setObject(index++, getFreight1(), Types.VARCHAR); 
	  }

	  if (modified[12]) { 
		if (getFreight2() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getFreight2().length() > 100) throw new DAException(DAResource.INVALID_LENGTH, "freight2"); 
		else _stmt.setObject(index++, getFreight2(), Types.VARCHAR); 
	  }

	  if (modified[13]) { 
		if (getMaster() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getMaster().length() > 40) throw new DAException(DAResource.INVALID_LENGTH, "master"); 
		else _stmt.setObject(index++, getMaster(), Types.VARCHAR); 
	  }

	  if (modified[14]) { 
		if (getDescript() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getDescript().length() > 400) throw new DAException(DAResource.INVALID_LENGTH, "descript"); 
		else _stmt.setObject(index++, getDescript(), Types.VARCHAR); 
	  }

	  if (modified[15]) { 
		if (getOptions() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getOptions().length() > 240) throw new DAException(DAResource.INVALID_LENGTH, "options"); 
		else _stmt.setObject(index++, getOptions(), Types.VARCHAR); 
	  }

	  if (modified[16]) { 
		if (getBols() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getBols().length() > 240) throw new DAException(DAResource.INVALID_LENGTH, "bols"); 
		else _stmt.setObject(index++, getBols(), Types.VARCHAR); 
	  }

	  if (modified[17]) { 
		if (getMnfstbot() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getMnfstbot().length() > 240) throw new DAException(DAResource.INVALID_LENGTH, "mnfstbot"); 
		else _stmt.setObject(index++, getMnfstbot(), Types.VARCHAR); 
	  }

	  if (modified[18]) { 
		if (getName() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getName().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "name"); 
		else _stmt.setObject(index++, getName(), Types.VARCHAR); 
	  }

	  if (modified[19]) { 
		if (getMarking() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getMarking().length() > 40) throw new DAException(DAResource.INVALID_LENGTH, "marking"); 
		else _stmt.setObject(index++, getMarking(), Types.VARCHAR); 
	  }

	  if (modified[20]) { 
		if (getQuantity() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getQuantity().length() > 40) throw new DAException(DAResource.INVALID_LENGTH, "quantity"); 
		else _stmt.setObject(index++, getQuantity(), Types.VARCHAR); 
	  }

	  if (modified[21]) { 
		if (getWeight() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getWeight().length() > 20) throw new DAException(DAResource.INVALID_LENGTH, "weight"); 
		else _stmt.setObject(index++, getWeight(), Types.VARCHAR); 
	  }

	  if (modified[22]) { 
		if (getNamerus() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getNamerus().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "namerus"); 
		else _stmt.setObject(index++, getNamerus(), Types.VARCHAR); 
	  }

	  if (modified[23]) { 
		if (getNote() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getNote().length() > 20) throw new DAException(DAResource.INVALID_LENGTH, "note"); 
		else _stmt.setObject(index++, getNote(), Types.VARCHAR); 
	  }

	  if (modified[24]) { 
		if (getGross_weight() == null) _stmt.setNull(index++, Types.DECIMAL);
		else _stmt.setObject(index++, getGross_weight(), Types.DECIMAL, 3); 
	  }

	  if (modified[25]) { 
		if (getNetweight() == null) _stmt.setNull(index++, Types.DECIMAL);
		else _stmt.setObject(index++, getNetweight(), Types.DECIMAL, 3); 
	  }

	  if (modified[26]) { 
		if (getContract() == null) _stmt.setNull(index++, Types.VARCHAR);
		else if (getContract().length() > 10) throw new DAException(DAResource.INVALID_LENGTH, "contract"); 
		else _stmt.setObject(index++, getContract(), Types.VARCHAR); 
	  }

	  if (getId() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "id");
	  _stmt.setObject(index++, getId(), Types.TIMESTAMP); 

	  int rowsAffected = _stmt.executeUpdate();
	  _stmt.close();
	  if (rowsAffected == 0) throw new DAException(DAResource.METHOD_AFFCTD_NOROWS);
	  if (rowsAffected > 1) throw new DAException(DAResource.METHOD_AFFCTD_MULTROWS);

	  setDataId(aDataId);

	} catch(SQLException exc) {
	  throw new DAException (DAResource.ERROR_IN_METHOD,"update(dataId) ", exc);
	} finally {
	  _stmt = null;
	  _setBusy(false);
	}

	setModified(false);
	_poSupport.fireUpdateComplete("update(dataId)", null);
  }  
  /**
	* Update a row in the database.
	*/
  public void updateAll() throws DAException { 

	if ( !_onBackground() && isAsynchronous() ) {
	  Object[] params = {   };
	  _putOnBackgroundThread( "updateAll()", params );
	  return ;
	} 

	try { 
	  if (getCurrentDatastore() == null) throw new DAException(DAResource.NO_CONNECT_EXIST); 

	  _stmt = getCurrentDatastore().getConnection().prepareStatement(
		  "UPDATE " + Bol.getQualifier() + "\"BOL\" SET " +
"                   \"N\" = ?, " +
"                   \"IDATE\" = ?, " +
"                   \"SHIPPER\" = ?, " +
"                   \"CONSIGNEE\" = ?, " +
"                   \"NOTIFYADDRESS\" = ?, " +
"                   \"SHIPOWNER\" = ?, " +
"                   \"FLAG\" = ?, " +
"                   \"VESSEL\" = ?, " +
"                   \"PORTOFLOADING\" = ?, " +
"                   \"PORTOFDISCHARGE\" = ?, " +
"                   \"DISTINATION\" = ?, " +
"                   \"FREIGHT1\" = ?, " +
"                   \"FREIGHT2\" = ?, " +
"                   \"MASTER\" = ?, " +
"                   \"DESCRIPT\" = ?, " +
"                   \"OPTIONS\" = ?, " +
"                   \"BOLS\" = ?, " +
"                   \"MNFSTBOT\" = ?, " +
"                   \"NAME\" = ?, " +
"                   \"MARKING\" = ?, " +
"                   \"QUANTITY\" = ?, " +
"                   \"WEIGHT\" = ?, " +
"                   \"NAMERUS\" = ?, " +
"                   \"NOTE\" = ?, " +
"                   \"GROSS_WEIGHT\" = ?, " +
"                   \"NETWEIGHT\" = ?, " +
"                   \"CONTRACT\" = ?" +
"         WHERE " +
"             \"ID\" = ? "
		); 

	  // put parameters into statement 
	  if (getN() == null) _stmt.setNull(1, Types.SMALLINT);
	  else _stmt.setObject(1, new Integer(getN().intValue()), Types.SMALLINT); 

	  if (getIdate() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "idate");
	  _stmt.setObject(2, getIdate(), Types.DATE); 

	  if (getShipper() == null) _stmt.setNull(3, Types.VARCHAR);
	  else if (getShipper().length() > 200) throw new DAException(DAResource.INVALID_LENGTH, "shipper"); 
	  else _stmt.setObject(3, getShipper(), Types.VARCHAR); 

	  if (getConsignee() == null) _stmt.setNull(4, Types.VARCHAR);
	  else if (getConsignee().length() > 200) throw new DAException(DAResource.INVALID_LENGTH, "consignee"); 
	  else _stmt.setObject(4, getConsignee(), Types.VARCHAR); 

	  if (getNotifyaddress() == null) _stmt.setNull(5, Types.VARCHAR);
	  else if (getNotifyaddress().length() > 200) throw new DAException(DAResource.INVALID_LENGTH, "notifyaddress"); 
	  else _stmt.setObject(5, getNotifyaddress(), Types.VARCHAR); 

	  if (getShipowner() == null) _stmt.setNull(6, Types.VARCHAR);
	  else if (getShipowner().length() > 200) throw new DAException(DAResource.INVALID_LENGTH, "shipowner"); 
	  else _stmt.setObject(6, getShipowner(), Types.VARCHAR); 

	  if (getFlag() == null) _stmt.setNull(7, Types.VARCHAR);
	  else if (getFlag().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "flag"); 
	  else _stmt.setObject(7, getFlag(), Types.VARCHAR); 

	  if (getVessel() == null) _stmt.setNull(8, Types.VARCHAR);
	  else if (getVessel().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "vessel"); 
	  else _stmt.setObject(8, getVessel(), Types.VARCHAR); 

	  if (getPortofloading() == null) _stmt.setNull(9, Types.VARCHAR);
	  else if (getPortofloading().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "portofloading"); 
	  else _stmt.setObject(9, getPortofloading(), Types.VARCHAR); 

	  if (getPortofdischarge() == null) _stmt.setNull(10, Types.VARCHAR);
	  else if (getPortofdischarge().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "portofdischarge"); 
	  else _stmt.setObject(10, getPortofdischarge(), Types.VARCHAR); 

	  if (getDistination() == null) _stmt.setNull(11, Types.VARCHAR);
	  else if (getDistination().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "distination"); 
	  else _stmt.setObject(11, getDistination(), Types.VARCHAR); 

	  if (getFreight1() == null) _stmt.setNull(12, Types.VARCHAR);
	  else if (getFreight1().length() > 100) throw new DAException(DAResource.INVALID_LENGTH, "freight1"); 
	  else _stmt.setObject(12, getFreight1(), Types.VARCHAR); 

	  if (getFreight2() == null) _stmt.setNull(13, Types.VARCHAR);
	  else if (getFreight2().length() > 100) throw new DAException(DAResource.INVALID_LENGTH, "freight2"); 
	  else _stmt.setObject(13, getFreight2(), Types.VARCHAR); 

	  if (getMaster() == null) _stmt.setNull(14, Types.VARCHAR);
	  else if (getMaster().length() > 40) throw new DAException(DAResource.INVALID_LENGTH, "master"); 
	  else _stmt.setObject(14, getMaster(), Types.VARCHAR); 

	  if (getDescript() == null) _stmt.setNull(15, Types.VARCHAR);
	  else if (getDescript().length() > 400) throw new DAException(DAResource.INVALID_LENGTH, "descript"); 
	  else _stmt.setObject(15, getDescript(), Types.VARCHAR); 

	  if (getOptions() == null) _stmt.setNull(16, Types.VARCHAR);
	  else if (getOptions().length() > 240) throw new DAException(DAResource.INVALID_LENGTH, "options"); 
	  else _stmt.setObject(16, getOptions(), Types.VARCHAR); 

	  if (getBols() == null) _stmt.setNull(17, Types.VARCHAR);
	  else if (getBols().length() > 240) throw new DAException(DAResource.INVALID_LENGTH, "bols"); 
	  else _stmt.setObject(17, getBols(), Types.VARCHAR); 

	  if (getMnfstbot() == null) _stmt.setNull(18, Types.VARCHAR);
	  else if (getMnfstbot().length() > 240) throw new DAException(DAResource.INVALID_LENGTH, "mnfstbot"); 
	  else _stmt.setObject(18, getMnfstbot(), Types.VARCHAR); 

	  if (getName() == null) _stmt.setNull(19, Types.VARCHAR);
	  else if (getName().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "name"); 
	  else _stmt.setObject(19, getName(), Types.VARCHAR); 

	  if (getMarking() == null) _stmt.setNull(20, Types.VARCHAR);
	  else if (getMarking().length() > 40) throw new DAException(DAResource.INVALID_LENGTH, "marking"); 
	  else _stmt.setObject(20, getMarking(), Types.VARCHAR); 

	  if (getQuantity() == null) _stmt.setNull(21, Types.VARCHAR);
	  else if (getQuantity().length() > 40) throw new DAException(DAResource.INVALID_LENGTH, "quantity"); 
	  else _stmt.setObject(21, getQuantity(), Types.VARCHAR); 

	  if (getWeight() == null) _stmt.setNull(22, Types.VARCHAR);
	  else if (getWeight().length() > 20) throw new DAException(DAResource.INVALID_LENGTH, "weight"); 
	  else _stmt.setObject(22, getWeight(), Types.VARCHAR); 

	  if (getNamerus() == null) _stmt.setNull(23, Types.VARCHAR);
	  else if (getNamerus().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "namerus"); 
	  else _stmt.setObject(23, getNamerus(), Types.VARCHAR); 

	  if (getNote() == null) _stmt.setNull(24, Types.VARCHAR);
	  else if (getNote().length() > 20) throw new DAException(DAResource.INVALID_LENGTH, "note"); 
	  else _stmt.setObject(24, getNote(), Types.VARCHAR); 

	  if (getGross_weight() == null) _stmt.setNull(25, Types.DECIMAL);
	  else _stmt.setObject(25, getGross_weight(), Types.DECIMAL, 3); 

	  if (getNetweight() == null) _stmt.setNull(26, Types.DECIMAL);
	  else _stmt.setObject(26, getNetweight(), Types.DECIMAL, 3); 

	  if (getContract() == null) _stmt.setNull(27, Types.VARCHAR);
	  else if (getContract().length() > 10) throw new DAException(DAResource.INVALID_LENGTH, "contract"); 
	  else _stmt.setObject(27, getContract(), Types.VARCHAR); 

	  if (getId() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "id");
	  _stmt.setObject(28, getId(), Types.TIMESTAMP); 

	  int rowsAffected = _stmt.executeUpdate(); 
	  if (rowsAffected == 0) { _stmt.close(); throw new DAException(DAResource.METHOD_AFFCTD_NOROWS); }
	  if (rowsAffected > 1) { _stmt.close(); throw new DAException(DAResource.METHOD_AFFCTD_MULTROWS); }

	  _stmt.close();
	}
	catch(SQLException exc) {
	  throw new DAException (DAResource.ERROR_IN_METHOD,"updateAll() ", exc);
	} 
	finally {
	  _stmt = null;
	  _setBusy(false);
	}

	setModified(false); 
	_poSupport.fireUpdateComplete("updateAll()", null); 
  }  
}