package uts.export.map;

//---------------------------------------------------------------------------
// This code was generated by IBM VisualAge for Java Data Access Builder.
// WARNING: Modifications to this code will be lost on next code generation.
//---------------------------------------------------------------------------



import java.lang.*;
import java.math.*;
import java.util.*;
import java.sql.*;
import com.ibm.ivj.eab.dab.*;
import java.awt.*;

//----------------------------------------------------------------
//
//  BolManager
//
//----------------------------------------------------------------

public class BolManager extends DAManager 
{
 //----------------------------------------------------------------
 // Constructors
 //----------------------------------------------------------------
  public BolManager() {}  
  public BolManager(DatastoreJDBC aDatastore) {
	super(aDatastore);
  }  
  public void _executeAction( String _methodName, Object[] _params ) throws Exception { 

	if ( _methodName.equals("deleteFetched()") ) {
	  deleteFetched();
	}
	else if ( _methodName.equals("updateFetched()") ) {
	  updateFetched();
	} 
	else
	  super._executeAction(_methodName,_params); 

  }  
  ManagerCompleteSupport _getManagerSupport() { return _managerSupport; }  
  protected final DataAccessObject _newElement() {
	DataAccessObject newObject = newElement();
	((Bol)newObject).setObjectsDatastore(getObjectsDatastore());
	return newObject;
  }  
  protected void _setBusy(boolean flag) { super._setBusy(flag); }  
  public void deleteFetched() throws DAException {

	if ( !_onBackground() && isAsynchronous() ) {
	  _putOnBackgroundThread( "deleteFetched()", null );
	  return;
	}

	try {
	  if (!isOpen()) throw new DAException(DAResource.CURSOR_NOT_OPEN);
	  if (!isFetched()) throw new DAException(DAResource.ROW_NOT_FETCHED);

	  PreparedStatement deleteStmt = getCurrentDatastore().getConnection().prepareStatement(
		  "DELETE FROM " + Bol.getQualifier() + "\"BOL\" WHERE CURRENT OF " + _rs.getCursorName()
		);

	  deleteStmt.executeUpdate();

	} catch(SQLException exc) {
	  throw new DAException(DAResource.ERROR_IN_METHOD, "deleteFetched() ", exc);
	} finally {
	  _setBusy(false);
	}

	_setFetched(false);
	element().setModified(false);
	_managerSupport.fireDeleteFetchedComplete();
  }  
  public Bol element() { return (Bol)_cachedObject; }  
  protected void firePropertyChange(String property, Object oldValue, Object newValue) {
	super.firePropertyChange(property, oldValue, newValue);
  }  
  public DatastoreJDBC getCurrentDatastore() {
	if (getObjectsDatastore() != null) return getObjectsDatastore();
	else if (Bol.getDefaultDatastore() != null) return Bol.getDefaultDatastore();
	else return DatastoreJDBC.getApplicationDatastore();
  }  
  public static String getSQLBaseQuery() { return "SELECT T1.\"ID\", " +
"                   T1.\"N\", " +
"                   T1.\"IDATE\", " +
"                   T1.\"SHIPPER\", " +
"                   T1.\"CONSIGNEE\", " +
"                   T1.\"NOTIFYADDRESS\", " +
"                   T1.\"SHIPOWNER\", " +
"                   T1.\"FLAG\", " +
"                   T1.\"VESSEL\", " +
"                   T1.\"PORTOFLOADING\", " +
"                   T1.\"PORTOFDISCHARGE\", " +
"                   T1.\"DISTINATION\", " +
"                   T1.\"FREIGHT1\", " +
"                   T1.\"FREIGHT2\", " +
"                   T1.\"MASTER\", " +
"                   T1.\"DESCRIPT\", " +
"                   T1.\"OPTIONS\", " +
"                   T1.\"BOLS\", " +
"                   T1.\"MNFSTBOT\", " +
"                   T1.\"NAME\", " +
"                   T1.\"MARKING\", " +
"                   T1.\"QUANTITY\", " +
"                   T1.\"WEIGHT\", " +
"                   T1.\"NAMERUS\", " +
"                   T1.\"NOTE\", " +
"                   T1.\"GROSS_WEIGHT\", " +
"                   T1.\"NETWEIGHT\", " +
"                   T1.\"CONTRACT\"" +
"         FROM " + Bol.getQualifier() + "\"BOL\" T1 "; }
  protected DataAccessObject newElement() { return new Bol(); }  
  public void open(String sqlSuffix) throws DAException
  { 

	if ( !_onBackground() && isAsynchronous() ) {
	  Object[] params = { sqlSuffix };
	  _putOnBackgroundThread( "open(String)", params );
	  return;
	}

	try {
	  if (getCurrentDatastore() == null) throw new DAException(DAResource.NO_CONNECT_EXIST);
	  if (isOpen()) close();
	  if (sqlSuffix == null) sqlSuffix = "";

	  _stmt = getCurrentDatastore().getConnection().prepareStatement(getSQLBaseQuery() + sqlSuffix); 

	  _setStmtOptions();
	  _rs = _stmt.executeQuery(); 
	  _map = new BolMap();
	  _setOpen(true);

	} catch(SQLException exc) {
	  throw new DAException(DAResource.OPEN_FAILED, exc);
	} finally {
	  _setBusy(false);
	}

	_managerSupport.fireOpenComplete("open(String)");
  }  
 //----------------------------------------------------------------
 // Database access methods
 //----------------------------------------------------------------

  public void select(String sqlSuffix) throws DAException
  { 

	if ( !_onBackground() && isAsynchronous() ) {
	  Object[] params = { sqlSuffix };
	  _putOnBackgroundThread( "select(String)", params );
	  return;
	}

	try {
	  if (getCurrentDatastore() == null) throw new DAException(DAResource.NO_CONNECT_EXIST);
	  if (isOpen()) close();
	  if (sqlSuffix == null) sqlSuffix = "";

	  _stmt = getCurrentDatastore().getConnection().prepareStatement(getSQLBaseQuery() + sqlSuffix); 

	  _setStmtOptions();
	  _rs = _stmt.executeQuery(); 
	  _map = new BolMap();
	  _fillInternalSequence();
	} catch(SQLException exc) {
	  throw new DAException (DAResource.SELECT_FAILED, exc);
	} finally {
	  _dbclose();
	  _setBusy(false);
	}

	_managerSupport.fireSelectComplete("select(String)");
  }  
  public void setObjectsDatastore(DatastoreJDBC aDatastore) {
	super.setObjectsDatastore(aDatastore);
	((Bol)_cachedObject).setObjectsDatastore(aDatastore);
  }  
  public void updateFetched() throws DAException {

	if ( !_onBackground() && isAsynchronous() ) {
	  _putOnBackgroundThread( "updateFetched()", null );
	  return;
	}

	Bol obj = element();

	try {
	  if (!isOpen()) throw new DAException(DAResource.CURSOR_NOT_OPEN);
	  if (!isFetched()) throw new DAException(DAResource.ROW_NOT_FETCHED);
	  if (!obj.isModified()) throw new DAException(DAResource.NO_CHANGES_MADE);

	  if (getCurrentDatastore().haveQuoteChar)
		 Bol.generator.QuoteChar = getCurrentDatastore().quoteChar; 

	  PreparedStatement updateStmt = getCurrentDatastore().getConnection().prepareStatement(
		  Bol.generator.genUpdateFetched(Bol.getQualifier(),
			  obj.getDataId().modified, obj.modified) + _rs.getCursorName()
		);

	  int index=1; 

	  if (obj.getDataId().modified[0]) { 
		if (obj.getId() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "id");
		updateStmt.setObject(index++, obj.getId(), Types.TIMESTAMP); 
	  }

	  if (obj.modified[0]) { 
		if (obj.getN() == null) updateStmt.setNull(index++, Types.SMALLINT);
		else updateStmt.setObject(index++, new Integer(obj.getN().intValue()), Types.SMALLINT); 
	  }

	  if (obj.modified[1]) { 
		if (obj.getIdate() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "idate");
		updateStmt.setObject(index++, obj.getIdate(), Types.DATE); 
	  }

	  if (obj.modified[2]) { 
		if (obj.getShipper() == null) updateStmt.setNull(index++, Types.VARCHAR);
		else if (obj.getShipper().length() > 200) throw new DAException(DAResource.INVALID_LENGTH, "shipper"); 
		else updateStmt.setObject(index++, obj.getShipper(), Types.VARCHAR); 
	  }

	  if (obj.modified[3]) { 
		if (obj.getConsignee() == null) updateStmt.setNull(index++, Types.VARCHAR);
		else if (obj.getConsignee().length() > 200) throw new DAException(DAResource.INVALID_LENGTH, "consignee"); 
		else updateStmt.setObject(index++, obj.getConsignee(), Types.VARCHAR); 
	  }

	  if (obj.modified[4]) { 
		if (obj.getNotifyaddress() == null) updateStmt.setNull(index++, Types.VARCHAR);
		else if (obj.getNotifyaddress().length() > 200) throw new DAException(DAResource.INVALID_LENGTH, "notifyaddress"); 
		else updateStmt.setObject(index++, obj.getNotifyaddress(), Types.VARCHAR); 
	  }

	  if (obj.modified[5]) { 
		if (obj.getShipowner() == null) updateStmt.setNull(index++, Types.VARCHAR);
		else if (obj.getShipowner().length() > 200) throw new DAException(DAResource.INVALID_LENGTH, "shipowner"); 
		else updateStmt.setObject(index++, obj.getShipowner(), Types.VARCHAR); 
	  }

	  if (obj.modified[6]) { 
		if (obj.getFlag() == null) updateStmt.setNull(index++, Types.VARCHAR);
		else if (obj.getFlag().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "flag"); 
		else updateStmt.setObject(index++, obj.getFlag(), Types.VARCHAR); 
	  }

	  if (obj.modified[7]) { 
		if (obj.getVessel() == null) updateStmt.setNull(index++, Types.VARCHAR);
		else if (obj.getVessel().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "vessel"); 
		else updateStmt.setObject(index++, obj.getVessel(), Types.VARCHAR); 
	  }

	  if (obj.modified[8]) { 
		if (obj.getPortofloading() == null) updateStmt.setNull(index++, Types.VARCHAR);
		else if (obj.getPortofloading().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "portofloading"); 
		else updateStmt.setObject(index++, obj.getPortofloading(), Types.VARCHAR); 
	  }

	  if (obj.modified[9]) { 
		if (obj.getPortofdischarge() == null) updateStmt.setNull(index++, Types.VARCHAR);
		else if (obj.getPortofdischarge().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "portofdischarge"); 
		else updateStmt.setObject(index++, obj.getPortofdischarge(), Types.VARCHAR); 
	  }

	  if (obj.modified[10]) { 
		if (obj.getDistination() == null) updateStmt.setNull(index++, Types.VARCHAR);
		else if (obj.getDistination().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "distination"); 
		else updateStmt.setObject(index++, obj.getDistination(), Types.VARCHAR); 
	  }

	  if (obj.modified[11]) { 
		if (obj.getFreight1() == null) updateStmt.setNull(index++, Types.VARCHAR);
		else if (obj.getFreight1().length() > 100) throw new DAException(DAResource.INVALID_LENGTH, "freight1"); 
		else updateStmt.setObject(index++, obj.getFreight1(), Types.VARCHAR); 
	  }

	  if (obj.modified[12]) { 
		if (obj.getFreight2() == null) updateStmt.setNull(index++, Types.VARCHAR);
		else if (obj.getFreight2().length() > 100) throw new DAException(DAResource.INVALID_LENGTH, "freight2"); 
		else updateStmt.setObject(index++, obj.getFreight2(), Types.VARCHAR); 
	  }

	  if (obj.modified[13]) { 
		if (obj.getMaster() == null) updateStmt.setNull(index++, Types.VARCHAR);
		else if (obj.getMaster().length() > 40) throw new DAException(DAResource.INVALID_LENGTH, "master"); 
		else updateStmt.setObject(index++, obj.getMaster(), Types.VARCHAR); 
	  }

	  if (obj.modified[14]) { 
		if (obj.getDescript() == null) updateStmt.setNull(index++, Types.VARCHAR);
		else if (obj.getDescript().length() > 400) throw new DAException(DAResource.INVALID_LENGTH, "descript"); 
		else updateStmt.setObject(index++, obj.getDescript(), Types.VARCHAR); 
	  }

	  if (obj.modified[15]) { 
		if (obj.getOptions() == null) updateStmt.setNull(index++, Types.VARCHAR);
		else if (obj.getOptions().length() > 240) throw new DAException(DAResource.INVALID_LENGTH, "options"); 
		else updateStmt.setObject(index++, obj.getOptions(), Types.VARCHAR); 
	  }

	  if (obj.modified[16]) { 
		if (obj.getBols() == null) updateStmt.setNull(index++, Types.VARCHAR);
		else if (obj.getBols().length() > 240) throw new DAException(DAResource.INVALID_LENGTH, "bols"); 
		else updateStmt.setObject(index++, obj.getBols(), Types.VARCHAR); 
	  }

	  if (obj.modified[17]) { 
		if (obj.getMnfstbot() == null) updateStmt.setNull(index++, Types.VARCHAR);
		else if (obj.getMnfstbot().length() > 240) throw new DAException(DAResource.INVALID_LENGTH, "mnfstbot"); 
		else updateStmt.setObject(index++, obj.getMnfstbot(), Types.VARCHAR); 
	  }

	  if (obj.modified[18]) { 
		if (obj.getName() == null) updateStmt.setNull(index++, Types.VARCHAR);
		else if (obj.getName().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "name"); 
		else updateStmt.setObject(index++, obj.getName(), Types.VARCHAR); 
	  }

	  if (obj.modified[19]) { 
		if (obj.getMarking() == null) updateStmt.setNull(index++, Types.VARCHAR);
		else if (obj.getMarking().length() > 40) throw new DAException(DAResource.INVALID_LENGTH, "marking"); 
		else updateStmt.setObject(index++, obj.getMarking(), Types.VARCHAR); 
	  }

	  if (obj.modified[20]) { 
		if (obj.getQuantity() == null) updateStmt.setNull(index++, Types.VARCHAR);
		else if (obj.getQuantity().length() > 40) throw new DAException(DAResource.INVALID_LENGTH, "quantity"); 
		else updateStmt.setObject(index++, obj.getQuantity(), Types.VARCHAR); 
	  }

	  if (obj.modified[21]) { 
		if (obj.getWeight() == null) updateStmt.setNull(index++, Types.VARCHAR);
		else if (obj.getWeight().length() > 20) throw new DAException(DAResource.INVALID_LENGTH, "weight"); 
		else updateStmt.setObject(index++, obj.getWeight(), Types.VARCHAR); 
	  }

	  if (obj.modified[22]) { 
		if (obj.getNamerus() == null) updateStmt.setNull(index++, Types.VARCHAR);
		else if (obj.getNamerus().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "namerus"); 
		else updateStmt.setObject(index++, obj.getNamerus(), Types.VARCHAR); 
	  }

	  if (obj.modified[23]) { 
		if (obj.getNote() == null) updateStmt.setNull(index++, Types.VARCHAR);
		else if (obj.getNote().length() > 20) throw new DAException(DAResource.INVALID_LENGTH, "note"); 
		else updateStmt.setObject(index++, obj.getNote(), Types.VARCHAR); 
	  }

	  if (obj.modified[24]) { 
		if (obj.getGross_weight() == null) updateStmt.setNull(index++, Types.DECIMAL);
		else updateStmt.setObject(index++, obj.getGross_weight(), Types.DECIMAL, 3); 
	  }

	  if (obj.modified[25]) { 
		if (obj.getNetweight() == null) updateStmt.setNull(index++, Types.DECIMAL);
		else updateStmt.setObject(index++, obj.getNetweight(), Types.DECIMAL, 3); 
	  }

	  if (obj.modified[26]) { 
		if (obj.getContract() == null) updateStmt.setNull(index++, Types.VARCHAR);
		else if (obj.getContract().length() > 10) throw new DAException(DAResource.INVALID_LENGTH, "contract"); 
		else updateStmt.setObject(index++, obj.getContract(), Types.VARCHAR); 
	  }

	  updateStmt.executeUpdate();
	  updateStmt.close();
	} catch(SQLException exc) {
	  throw new DAException(DAResource.ERROR_IN_METHOD, "updateFetched() ", exc);
	} finally {
	  _setBusy(false);
	}

	obj.setModified(false);
	_managerSupport.fireUpdateFetchedComplete();
  }  
}